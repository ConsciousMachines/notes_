df[max_idx,]
df[,4]
df
df = matrix(nrow=40*40*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,40))
{
for (lam2 in seq(1,40))
{
df[i,] = em_algo(p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
df = matrix(nrow=40*40*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,40))
{
for (lam2 in seq(1,40))
{
df[i,] = c(p,lam1,lam2,em_algo(p, lam1, lam2)[4])
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
df[,4]
df
em_algo = function(p, lam1, lam2)
{
x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
df = matrix(nrow=40*40*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,40))
{
for (lam2 in seq(1,40))
{
df[i,] = em_algo(p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
n = 10
x = rep(NA,n)
x
x = rep(NA,n)
for (i in 1:n)
{
if (runif(1) < p)
lam = lam1
else
lam = lam2
x[i] = rpois(1, lam)
}
x
lam1
lam2
generate_data(10, 0.3, 5, 15)
generate_data = function(n, p, lam1, lam2)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
generate_data(10, 0.3, 5, 15)
x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
length(x)
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data()
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data()
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data()
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data()
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E-step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M-step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# Convergence check
lik_new = sum(log(pois1 + pois2))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data()
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=100)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=100)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=100)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=100)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=100)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=1000)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
#x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
x = generate_data(n=1000)
df = matrix(nrow=20*20*9,ncol=4)
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
df[max_idx,]
em_algo = function(x, p, lam1, lam2)
{
lik = -Inf
while (TRUE)
{
# E step
pois1 =     p * dpois(x, lam1)
pois2 = (1-p) * dpois(x, lam2)
w     = pois1 / (pois1 + pois2)
# M step
p    = mean(w)
lam1 = sum(w     * x) / sum(w)
lam2 = sum((1-w) * x) / sum(1-w)
# check convergence
lik_new = sum(log(p * dpois(x, lam1) + (1-p) * dpois(x, lam2)))
if (abs(lik_new - lik) < 1e-8)
break
lik = lik_new
}
return(c(p, lam1, lam2, lik_new))
}
grid_search = function(x) # search over a range of parameters
{
df = matrix(nrow=20*20*9,ncol=4)
colnames(df) = c('p', 'lam1', 'lam2', 'lik')
i = 1
for (p in seq(0.1, 0.9, 0.1))
{
for (lam1 in seq(1,20))
{
for (lam2 in seq(1,20))
{
df[i,] = em_algo(x, p, lam1, lam2)
i = i + 1
}
}
}
max_idx = which.max(df[,4])
return(df[max_idx,])
}
generate_data = function(n = 20, p = 0.3, lam1 = 5, lam2 = 15)
{
x = rep(NA,n)
for (i in 1:n)
{
lam = if (runif(1) < p) lam1 else lam2
x[i] = rpois(1, lam)
}
return(x)
}
x = c(24, 18, 21, 5, 5, 11, 11, 17, 6, 7, 20, 13, 4, 16, 19, 21, 4, 22, 8, 17)
grid_search(x)
