

- chapter 1

sample space: set of all possible outcomes of an experiment

we use uncountable sample spaces because they are less cumbersome & provide a close approximation to real world countable sample spaces.

event: collection of outcomes of experiment, subset of sample space. 

events A,B disjoint (mutually exclusive) if A int B = nullset 
	for a sequence: pairwise disjoint
	
Ai pairwise disjoint, U Ai = sample space, then this is a partition of S.

- axiomatic foundations

	for each event A in sample space S, we want to associate with it a number P(A) between 0,1.
	
	sigma algebra (Borel Field?): collection of subsets of S
		- contains nullset
		- intersections
		- countable unions
		
	S real line, B chosen to be sigma-algebra generated by intervals. 
	
	probability function: P with domain B,
		- P(A) >= 0
		- P(S) = 1
		- P(U Ai) disjoint = sum P(Ai)
		
	we want general methods to define probability functions that satisfy the above Kolmogorov Axioms.
	
	Theorem 1.2.6
		S finite set, B sigma algebra. p1..pn nonnegative numbers, sum to 1. define
			P(A) = sum pi {i : si in A}
		then P is prob function on B. also true if S countable.
		
	Proof:
		S finite.
		
		P(A) >= 0 since pi >= 0, satisfying axiom 1.
		
		P(S) = sum pi {i : si in S} = sum_1^n pi = 1, satisfying axiom 2
		
		let A1..Ak be pairwise disjoint events (S finite, so consider finite disjoint unions) 
		
			P(U Ai) = sum pj {j : sj in U_{i=1}^k Ai}
				(by def)
				(sum over prob of singleton sj which occurs in union of Ai)
			
			= sum_{i=1}^k sum_{j : sj in Ai} pj
				(since Ai disjoint)
					(sum over sj in UAi, vs sum over Ai, and sum over sj in each Ai)
				(sum over the Ai, for each Ai sum over pj of elements sj in Ai)
				
			= sum_{i=1}^k P(Ai)
				(by def)
			
			satisfying axiom 3.
			
	some people don't accept axiom 3 because it is not simple / self-evident.
	
- calculus of probabilities

	Thm 1.2.8
		P prob fn, A any set in BB
		- P(nullset) = 0
		- P(A) <= 1
		- P(Ac) = 1 - P(A)
		
	proof
		c)
			A and Ac partition S, S = A U Ac
			P(A U Ac) = P(S) = 1 by axiom 2
			
			A and Ac disjoint so by axiom 3, P(A U Ac) = P(A) + P(Ac)
			
			P(A) + P(Ac) = 1
			P(Ac) = 1 - P(A)
			
		b) 
			since P(Ac) >= 0, 
			from (c) we know P(A) = 1 - P(Ac)
			thus P(A) <= 1
			
		a)
			S = S U nullset
				these are disjoint
			1 = P(S) = P(S U nullset) = P(S) + P(nullset) = 1 + P(nullset)
			
	Thm 1.2.9
		P prob fn, A,B sets in BB
		- P(B int A) = P(B) - P(Ac int B)
		- P(A U B) = P(A) + P(B) - P(A int B)
		- A susbet B then P(A) <= P(B)
		
	proof:
		a)
			B = (B int A) U (B int Ac) disjoint
			P(B) = P((B int A) U (B int Ac)) 
			= P(B int A) + P(B int Ac)
			
		b)
			A U B = A U (B int Ac) disjoint
			P(A U B) = P(A) + P(B int Ac) 
			= P(A) + P(B) - P(A int B) 
				from part (a)
				
		c)
			A subset B, then A int B = A, thus by (a)
			0 <= P(B int Ac) = P(B) - P(A)
	
	Bonferroni's Inquality: formula (b)
		P(A U B) = P(A) + P(B) - P(A int B) gives an inequality for probability of an intersection:
			P(A U B) <= 1
			we get
			P(A int B) >= P(A) + P(B) - 1
		this is a special case. Bonferroni allows us to bound the probability of simultaneous event (int) 
			in terms of probabilities of individual events. 
			
	Thm 1.2.11
		P prob fn,
		- P(A) = sum P(A int Ci) for any partition Ci
		- P(U Ai) <= sum P(Ai) for any Ai - BOOLE'S INEQUALITY
		
	proof
		a)
		Ci partition, disjoint, S = U Ci
			A = A int S 
			= A int (U Ci)
			= U (A int Ci)
			P(A) = P(U (A int Ci))
			= sum P(A int Ci) since Ci disjoint and (A int Ci) also disjoint
			
		b)
		let Bi = Ai \ (A1 U ... U Ai-1) 
		P(U Ai) = P(U Bi) = sum P(Bi)
		<= sum P(Ai)
			
	deriving Bonferroni from Boole:
		apply Boole to Ac:
			
			P(U_1^n Aic) <= sum_1^n P(Aic)
			
			P(U_1^n Aic) <= sum_1^n 1 - P(Ai)
			
			P(U_1^n Aic) <= n - sum_1^n P(Ai)
			
			1 - P(int_1^n Ai) <= n - sum_1^n P(Ai)
			
			P(int_1^n Ai) >= sum_1^n P(Ai) - (n-1)
		
- counting

	Thm 1.2.14: Fundamental Theorem of Counting
		a job has k tasks, ith of which is done in ni ways, 
		then the job can be done in Prod_i n_i ways.
		
	Proof:
		induction? for k=2, 
		first task done in n1 ways, for each of these ways we have n2 choices to do task 2.
		thus the job done in n1*n2 ways. 
		
	[basically combining separate tasks turns into multiplication]
	
	[also: with / without replacement]
	
	[also: does order matter?]
	
	- counting lottery tickets (picking r objects from n)
	
		ordered, without replacement:
			first number picked 44 ways, 2nd 43, etc... so 44*43*42*41*40*39
			
		ordered, with replacement:
			each number selected 44 ways, so 44^6
			
		unoredered, without replacement
			divide ordered by number of ways to order it
			by FTC, 6 numbers can be arranged in 6! ways
			so total number of unordered tickets is 44! / 6! 38! 
		
		unordered, with replacement
			to choose an unordered set of 6 numbers with replacement from 44, 
			is the same as placing 6 markers in the 44 bins representing each number.
			(marker in bin = i select this number. markers not unique = unordered. multiple markers per bin = replacement)
			this is equivalent to a sequence of markers, and 44-1=43 walls between them. 
			this is (49 C 6) or (n+r-1 C r)
			(n bins, n-1 walls, r markers, n+r-1 objects total)
			
		
		
		
			
			
- PROBLEMS

- skip 26, 30, 36, 42

FAILED
18 - remember balls unique?
20 - 


1. 
	a. 
		toss coin 4 times - sample space is sequence of XXXX, X in {H,T} so 2^4 ways
		
	b.
		number of insect damaged leaves on a plant: {0..n} where n is total number of leaves on plant
		
	c.
		lifetime in hours of lightbulb: Natural numbers {0,1,...}
		
	d.
		weights of 10 day old rats: (0,1) in kilos? weight can be any real number i guess
		
	e.
		proportion of defectives in shipment: n is number of items in shipment. S = {0/n, 1/n, 2/n, ... n/n}
		
2.
	a.
		A \ B = A \ (A int B)
		
		=>
		x in LHS
		x in A, x not in B
			since (A int B) subset B, 
			if x not in B, x not in (A int B)
		x in A, x not in (A int B)
		x in RHS
		
		<= 
		x in RHS
		x in A, x not in (A int B)
		x in A, x not in both
			since x in A, and x not in both, it must be that x not in B.
		x in A, x not in B
		x in LHS
		
		A \ (A int B) = A int Bc
		
		=> 
		x in LHS 
		x in A, x not in (A int B)
		x in A, x not in both
		x in A, x not in B
		x in A, x in Bc
		x in RHS 
		
		<= 
		x in RHS 
		x in A, X in Bc
		x in A, x not in B
			since (A int B) subset B,
		x in A, x not in (A int B)
		x in LHS
		
	b.
		B = (B int A) U (B int Ac)
		
		=> 
		x in LHS
		x in B 
		x in A or Ac
		x in (B int A) or (B int Ac)
		x in (B int A) U (B int Ac)
		x in RHS
		
		<= 
		x in RHS
		x in (B int A) or x in (B int Ac)
		(x in B and A) or (x in B and Ac)
		x in B either way
		x in LHS
		
	c.
		B \ A = B int Ac
		
		=> 
		x in LHS
		x in B, x not in A 
		x in B, x in Ac
		x in RHS
		
		<= 
		x in RHS
		x in B, x in Ac
		x in B, x not in A
		x in LHS
		
	d.
		A U B = A U (B int Ac)
		
		=>
		x in LHS
		x in (A U B) 
		x in A, x in B, or x in both
		x in A and B, x in A and not B, x in B and not A
		x in A, or x in B and not A
		thus x in RHS
		
		<= 
		x in RHS 
		x in A or x in (B int Ac)
		x in A, or (x in B and not A)
			A = (A and B) or (A without B)
		x in (A and B), or x in (A without B), or (x in B without A)
		x in (AUB)
		x in LHS	
		
3.
	a.
		A U B = B U A
		
		=> 
		x in LHS 
		x in A or x in B
		x in B or x in A
		x in RHS
		
		<= 
		x in RHS
		x in B or x in A
		x in A or x in B
		x in LHS
		
		A int B = B int A
		
		x in LHS
		x in A or B
		x in RHS 
		
		x in RHS
		x in A or B 
		x in LHS
		
		
	b.
		A U (B U C) = (A U B) U C
		
		=> 
		x in LHS 
		x in A or x in (B U C)
		x in A or x in B or x in C
		x in (A U B) or x in C
		x in RHS
		
		<= 
		x in AUB or x in C
		x in A or x in B or x in C
		x in A or x in BUC
		x in LHS
	
	c.
		(A U B)c = Ac int Bc
		
		=>
		x in LHS 
		x not in (AUB)
		x not in (A, B, or both)
		x not in A, x not in B, x not in both
		x in Ac, x in Bc
		x in RHS
		
		<=
		x in Ac, x in Bc
		x not in A, x not in B
		x not in A, x not in B, x not in both
		x not in (AUB)
		x in (AUB)c
	


4.
	a.
		P(A U B) = P(A) + P(B) - P(A int B)
		
	b.
		thm: P(B int A) = P(B) - P(Ac int B)

		P((A \ B) U (B \ A)) = P(A \ B) + P(B \ A)
		= P(A int Bc) + P(B int Ac)
		= P(A) - p(A int B) + P(B) - P(A int B)
		= P(A) + P(B) - 2 P(A int B)
		
	c.
		at least one of A or B - same as (a) ???
		
	d.
		at most one of A or B - same as (b) ???
		SOLN - ugh i forgot the 0 case lol - so (A int B)c = 1 - P(A int B)
		
5.
	a)
		US birth results in twins that are identical, and both female
		
	b)
		P(identical | twins) = 1/3
		P(fraternal | twins) = 2/3
		
		P(both male   | identical) = 1/2
		P(both female | identical) = 1/2
		
		P(both female | fraternal) = 1/4
		P(both male   | fraternal) = 1/4
		P(mixed       | fraternal) = 1/2
		
		P(twins | US) = 1/90
		
		P(US twins, identical, both female) = P(twins | US) P(identical | twins) P(both female | identical) = (1/90)(1/3)(1/2) = 1/(540)
		
6.
	p2 = uw
	p0 = (1-u)(1-w) = 1 -u -w + uw
	p1 = u(1-w) + w(1-u) = u -uw + w -uw = u + w - 2uw
	
	p0 = p1 = p2
	
	p0 = p2
	1 -u -w + uw = uw
	1 -u -w = 0
	u + w = 1
	
	p0 = p1
	1 -u -w + uw = u + w - 2uw
	1 -2u -2w + 3uw = 0
	1 + 3uw = 2u + 2w = 2
	3uw = 1
	uw = 1/3
	u(1-u) = 1/3
	u - u^2 = 1/3
	-u^2 + u - 1/3 = 0
	
	(-b +- sqrt(b^2 - 4ac)) / 2a
	(-1 +- sqrt(1 - 4/3)) / 2a - complex roots. no soln
	
7.
	a.
		P(0 pts) = [A - pi r^2] / A
	
		P(score i pts) = {  pi[r(6 - i)]^2/25 - pi[r(5 - i)]^2/25  }*(1/A)
		= pi r^2 /A25 * [(6 - i)^2 - (5 - i)^2]

	b.
		P(hit board) = pi r^2 / A
		
		P(score i pts | hit board) P(hit board) = P(score i pts and hit board)
		
		P(score i pts | hit board) = P(score i pts and hit board) / P(hit board)
		
		= pi r^2 /A25 * [(6 - i)^2 - (5 - i)^2]    * A / (pi r^2) 
		
		=  [(6 - i)^2 - (5 - i)^2] / 25 
		
		as seen in example.
	
8.
	a.
		literally did this in previous problem
		
	b.
		P(score i pts)
		
		= pi r^2 /A25 * [(6 - i)^2 - (5 - i)^2]
		
		= pi r^2 /A25 * [36 - 12i + ii - (25 - 10i + ii)]
		
		= pi r^2 /A25 * [36 - 12i + ii - 25 + 10i - ii]
		
		= pi r^2 /A25 * [36 - 12i - 25 + 10i]
		
		= pi r^2 /A25 * [11 - 2i]
		
	c.
		- probabilities positive for i=1..5
		
		- [11 - 2i] = 9, 7, 5, 3, 1 which sum to 25 so it sums to 1
		
		- P(i U j) = 
			ok not sure how to prove this and the solution is literally retarded. as in just states the result lol.
			
9.
	a.
		(Ua Aa)c = int_a Aac
		
		=>
		x in LHS
		x not in (Ua Aa)
		x not in each Aa
		x in each Aac
		x in inr Aac
		x in RHS
		
		<= 
		x in RHS
		x in each Aac
		for each Aa, x not in it
		thus x not in Ua Aa
		x in (Ua Aa)c 
		x in LHS
		
	b.
		(int Aa)c = U Aac
		
		=>
		x in LHS
		x not in (int Aa)
		x not in every Aa
		there exists Aa which doesnt contain x
		x in some Aac
		x in U Aac
		
		<= 
		x in RHS 
		x in U Aac
		x in some Aac 
		there exists Aa which doesnt contain x
			since (int Aa) subset this particular Aa,
		(int Aa) does not contain x
		x in (int Aa)c
		
10.
	literally same as 9
	
11.
	a.
		- nullset in it
		- complements: nullset-c = S and S-c = nullset both in it.
		- union: S U nullset = S is in it.
		
	b.
		- nullset is a subset, so in it
		- complements: A subset of S. Ac = (S \ A) is a subset of S, so also in BB.
		- countable union:
			x in U Ai
			x in some Ai
			x in S 
			U Ai subset S
			
	c.
		- nullset in both
		- if A in int, A in both, Ac in both, Ac in int
		- if Ai in int, Ai in both, U Ai in both, U Ai in int
		
12.
	a.
		A1 = A, A2 = B, Ai = nullset for i > 2
		
	b.
		if An v nullset then P(An) -> 0 
		P(A U B) = P(A) U P(B)
		
		WTS: P(U Ai) = sum P(Ai), Ai disjoint
		
		by induction, 
		P(U_1^n Ai) = sum_1^n P(Ai)
		
		p(U Ai) = P(U_1^n Ai) + P(U_n+1^inf Ai)
		= sum_1^n Ai + P(U_n+1^inf Ai)
			
			take limit as n->inf
			if U_n+1^inf Ai goes to nullset, then P(U_n+1^inf Ai) -> 0 and we get
			
		= sum_1^inf Ai 
		
		show U_n+1^inf Ai goes to nullset:
		
			assume x in U_n+1^inf Ai
			x in some Ai, and not in any other since disjoint. 
			then x not in U_n+1^inf Ai when n>i.
			thus this thing is empty. 
			thus the axiom of continuity holds.
			
	- i think soln is wrong because they say Bk -> nullset, otherwise prob would be infinite. the prob could be convergent sum.
	
13.
	by bonferroni, P(A) = 1/3, P(B) = 3/4, P(A int B) >= 1/3 + 3/4 - 1 = (4 + 9)/12 -1 = 1/12 so no they cant be

	soln says if they were disjoint, then P(A) + P(B) > 1. 
		if A,B disjoint then A subset B, and since P(A) = 1/3 > 1/4 doesnt allow P(A) <= P(B) 
		
14.
	any subset will either contain or not contain element i. 
	create a sequence of length n, in the ith place write 1 if element i is contained, 0 if not.
	this gives us a 1-1 map from sequences to subsets.
	number of such sequences is 2^n
	
15.
	if a job consists of k tasks, there are Prod ni ways to complete the job. 
	induction: 
	base case: showed # ways = n1*n2 for 2 tasks.
	ind step:
	assume holds for n. show n+1
	a job has n+1 tasks. the first n can be done in Prod_1^n ni ways. the (n+1)th done in n_(n+1) ways
	
	consider the first n tasks as one big task. 
	apply the base case, we get (Prod_1^n ni) * n_(n+1) = Prod_1^n+1 ni ways.
	
16.
	yes
	
17.
	yes
	
18.
	ok i failed this one - i was using the walls method and didnt realize i was creating more empty spaces -.-
	
19.
	a.
		cells = variables x,y,z
		balls = number of derivatives. 
		so 4th derivative = 4 balls, place in 3 cells x,y,z - (4+3-1 C 4)
		
	b.
		r derivatives = r balls
		n variables = n cells
		so place r balls into n cells - arrange r balls and n-1 walls, (n+r-1 C r) ways
		
20.
	7 bins, 12 balls. place 1 ball in each bin. 5 balls left to do whatever. 
	(7+5-1 C 5) / (7+12-1 C 12) 
	(11 C 5) / (18 C 12)
	462 / 18564
		
